{"$type":"MixItUp.Base.Model.Overlay.Widgets.OverlayWidgetV3Model, MixItUp.Base","Name":"Custom","Item":{"$type":"MixItUp.Base.Model.Overlay.OverlayCustomV3Model, MixItUp.Base","Properties":{"$type":"System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.String, mscorlib]], mscorlib"},"Chatters":false,"ChatMessages":false,"Follows":false,"Raids":false,"TwitchSubscriptions":false,"TwitchBits":false,"YouTubeMemberships":false,"YouTubeSuperChats":false,"TrovoSubscriptions":false,"TrovoElixirSpells":false,"Donations":false,"Text":null,"FontSize":24,"FontName":"Arial","FontColor":"Black","Bold":false,"Italics":false,"Underline":false,"TextAlignment":0,"ShadowColor":null,"Version":0,"OverlayEndpointID":"00000000-0000-0000-0000-000000000000","Type":999,"DisplayOption":0,"Width":0,"Height":0,"PositionType":0,"XPosition":25,"YPosition":75,"XMaximum":0,"YMaximum":0,"Layer":0,"OldCustomHTML":null,"ID":"1a55a3d6-a702-41f1-937c-f58327afd783","HTML":"<div id=\"maindiv\" class=\"maindiv\">\r\n <div id=\"contentdiv\" class=\"contentdiv\">\r\n  <div class=\"left-hand-container\">\r\n   <div class=\"left-card-1\" id=\"card\"></div>\r\n   <div class=\"left-card-2\" id=\"card\"></div>\r\n   <div class=\"left-card-3\" id=\"card\"></div>\r\n   <div class=\"left-card-4\" id=\"card\"></div>\r\n   <div class=\"left-card-5\" id=\"card\"></div>\r\n  </div>\r\n  <div class=\"field-container\">\r\n   <div class=\"field-card-1\" id=\"card\"></div>\r\n   <div class=\"field-card-2\" id=\"card\"></div>\r\n   <div class=\"field-card-3\" id=\"card\"></div>\r\n   <div class=\"field-card-4\" id=\"card\"></div>\r\n   <div class=\"field-card-5\" id=\"card\"></div>\r\n   <div class=\"field-card-6\" id=\"card\"></div>\r\n   <div class=\"field-card-7\" id=\"card\"></div>\r\n   <div class=\"field-card-8\" id=\"card\"></div>\r\n   <div class=\"field-card-9\" id=\"card\"></div>\r\n  </div> \r\n  <div class=\"right-hand-container\">\r\n   <div class=\"right-card-1\" id=\"card\"></div>\r\n   <div class=\"right-card-2\" id=\"card\"></div>\r\n   <div class=\"right-card-3\" id=\"card\"></div>\r\n   <div class=\"right-card-4\" id=\"card\"></div>\r\n   <div class=\"right-card-5\" id=\"card\"></div>\r\n  </div>\r\n </div>\r\n</div>","CSS":"@keyframes leftspin {\r\n from {\r\n  transform: rotateY(0);\r\n }\r\n to {\r\n  transform: rotateY(-360deg);\r\n }\r\n}\r\n\r\n@keyframes rightspin {\r\n from {\r\n  transform: rotateY(0);\r\n }\r\n to {\r\n  transform: rotateY(360deg);\r\n }\r\n}\r\n\r\n@keyframes topspin {\r\n from {\r\n  transform: rotateX(0);\r\n }\r\n to {\r\n  transform: rotateX(360deg);\r\n }\r\n}\r\n\r\n@keyframes bottomspin {\r\n from {\r\n  transform: rotateY(0);\r\n }\r\n to {\r\n  transform: rotateY(-360deg);\r\n }\r\n}\r\n\r\n@keyframes btr {\r\n from {\r\n  background-color: SlateBlue;\r\n }\r\n to {\r\n  background-color: IndianRed;\r\n }\r\n}\r\n\r\n@keyframes rtb {\r\n from {\r\n  background-color: IndianRed;\r\n }\r\n to {\r\n  background-color: SlateBlue;\r\n }\r\n}\r\n\r\n.contentdiv {\r\n display: grid;\r\n max-width:800px;\r\n}\r\n\r\n#card {\r\n min-width: 104px;\r\n min-height: 128px;\r\n}\r\n\r\n/* Left Hand CSS */\r\n.left-hand-container {\r\n display: grid;\r\n grid-column: 1;\r\n grid-row: 1;\r\n max-height:260px;\r\n}\r\n\r\n.left-card-1 {\r\n grid-column: 1;\r\n grid-row: 1;\r\n background-color: #1589FF;\r\n border-top-left-radius: 15px;\r\n}\r\n\r\n.left-card-2 {\r\n grid-column: 2;\r\n grid-row: 1;\r\n background-color: #79BAEC;\r\n border-top-right-radius: 15px;\r\n}\r\n\r\n.left-card-3 {\r\n grid-column: 1;\r\n grid-row: 2;\r\n background-color: #79BAEC;\r\n}\r\n\r\n.left-card-4 {\r\n grid-column: 2;\r\n grid-row: 2;\r\n background-color: #1589FF;\r\n border-bottom-right-radius: 15px;\r\n \r\n}\r\n\r\n.left-card-5 {\r\n grid-column: 1;\r\n grid-row: 3;\r\n background-color: #1589FF;\r\n border-bottom-right-radius: 15px;\r\n border-bottom-left-radius: 15px;\r\n}\r\n\r\n/* Right Hand CSS */\r\n.right-hand-container {\r\n display: grid;\r\n grid-column: 3;\r\n grid-row: 1;\r\n max-height:260px;\r\n}\r\n\r\n.right-card-1 {\r\n grid-column: 1;\r\n grid-row: 1;\r\n border-top-left-radius: 15px;\r\n background-color: #C21E56;\r\n}\r\n\r\n.right-card-2 {\r\n grid-column: 2;\r\n grid-row: 1;\r\n border-top-right-radius: 15px;\r\n background-color: #CC7A8B;\r\n}\r\n\r\n.right-card-3 {\r\n grid-column: 1;\r\n grid-row: 2;\r\n background-color: #CC7A8B;\r\n border-bottom-left-radius: 15px;\r\n}\r\n\r\n.right-card-4 {\r\n grid-column: 2;\r\n grid-row: 2;\r\n background-color: #C21E56;\r\n}\r\n\r\n.right-card-5 {\r\n grid-column: 2;\r\n grid-row: 3;\r\n border-bottom-right-radius: 15px;\r\n border-bottom-left-radius: 15px;\r\n background-color: #CC7A8B;\r\n}\r\n\r\n\r\n/* Field CSS */\r\n.field-container {\r\n display: grid;\r\n grid-column: 2;\r\n grid-row: 1;\r\n margin: 32px;\r\n}\r\n\r\n.field-card-1 {\r\n grid-column: 1;\r\n grid-row: 1;\r\n background-color: #AAAAAA;\r\n border-top-left-radius: 15px;\r\n}\r\n\r\n.field-card-2 {\r\n grid-column: 2;\r\n grid-row: 1;\r\n background-color: #DDDDDD;\r\n}\r\n\r\n.field-card-3 {\r\n grid-column: 3;\r\n grid-row: 1;\r\n background-color: #AAAAAA;\r\n border-top-right-radius: 15px;\r\n}\r\n\r\n.field-card-4 {\r\n grid-column: 1;\r\n grid-row: 2;\r\n background-color: #DDDDDD;\r\n}\r\n\r\n.field-card-5 {\r\n grid-column: 2;\r\n grid-row: 2;\r\n background-color: #AAAAAA;\r\n}\r\n\r\n.field-card-6 {\r\n grid-column: 3;\r\n grid-row: 2;\r\n background-color: #DDDDDD;\r\n}\r\n\r\n.field-card-7 {\r\n grid-column: 1;\r\n grid-row: 3;\r\n background-color: #AAAAAA;\r\n border-bottom-left-radius: 15px;\r\n}\r\n\r\n.field-card-8 {\r\n grid-column: 2;\r\n grid-row: 3;\r\n background-color: #DDDDDD;\r\n}\r\n\r\n.field-card-9 {\r\n grid-column: 3;\r\n grid-row: 3;\r\n background-color: #AAAAAA;\r\n border-bottom-right-radius: 15px;\r\n}","Javascript":" let left_player = [null,null,null,null,null];\r\n let blue_score = 0;\r\n let right_player = [null,null,null,null,null];\r\n let red_score = 0;\r\n let field = [null,null,null,null,null,null,null,null,null];\r\n let turn_player = 0;\r\n let turn_count = 1;\r\n \r\n async function Move(player, hand, field_pos) {\r\n  let card = null;\r\n  let atk = null;\r\n  let def = null;\r\n  if(player == 'left') {\r\n   card = left_player[hand];\r\n   left_player[hand] = null;\r\n   atk = 'blue';\r\n   def = 'red';\r\n  }\r\n  if(player == 'right') {\r\n   card = right_player[hand];\r\n   right_player[hand] = null;\r\n   atk = 'red';\r\n   def = 'blue';\r\n  }\r\n  card.field_pos = field_pos;\r\n  field[field_pos] = card;\r\n  await Flipper(card, atk, def);\r\n  const newPromise = new Promise( (resolve, reject) => setTimeout(() => { resolve(\"Move Done\"); }, 10) );\r\n }\r\n \r\n async function Flipper(card, atk, def) {\r\n  var left = null;\r\n  var right = null;\r\n  var top = null;\r\n  var bottom = null;\r\n  field_pos = Number(card.field_pos);\r\n  if(field_pos > 0 && field_pos != 3 && field_pos != 6) {\r\n   let i = field_pos-1;\r\n   left = field[i];\r\n  }\r\n  if(field_pos > 2) {\r\n   let i = field_pos-3;\r\n   top = field[i];\r\n  }\r\n  if(field_pos < 8 && field_pos != 2 && field_pos != 5) {\r\n   let i = field_pos+1;\r\n   right = field[i];\r\n  }\r\n  if(field_pos < 6) {\r\n   let i = field_pos+3;\r\n   bottom = field[i];\r\n  }\r\n  if(left != null) {\r\n   if(left.right < card.left && left.color == def) {\r\n    left.color = atk;\r\n    left.animation = 'animation-name: leftspin; animation-duration: 2s';\r\n    await Flipper(left, atk, def);\r\n   }\r\n  }\r\n  if(top != null) {\r\n   if(top.bottom < card.top && top.color == def) {\r\n    top.color = atk;\r\n    top.animation = 'animation-name: topspin; animation-duration: 2s';\r\n    await Flipper(top, atk, def);\r\n   }\r\n  }\r\n  if(right != null) {\r\n   if(right.left < card.right && right.color == def) {\r\n    right.color = atk;\r\n    right.animation = 'animation-name: rightspin; animation-duration: 1s';\r\n    await Flipper(right, atk, def);\r\n   }\r\n  }\r\n  if(bottom != null) {\r\n   if(bottom.top < card.bottom && bottom.color == def) {\r\n    bottom.color = atk;\r\n    bottom.animation = 'animation-name: bottomspin; animation-duration: 1s';\r\n    await Flipper(bottom, atk, def);\r\n   }\r\n  }\r\n  const newPromise = new Promise( (resolve, reject) => setTimeout(() => { resolve(\"Flipper Done\"); }, 10) );\r\n\r\n }\r\n \r\n function Draw() {\r\n  left_player.forEach((card, index) => {\r\n   if(card != null) {\r\n    let doc = document.getElementsByClassName('left-card-' + (card.order+1))[0];\r\n    doc.innerHTML = '<img src=\"' + card.image + '\">';\r\n   }\r\n   else {\r\n    let doc = document.getElementsByClassName('left-card-' + (index+1))[0];\r\n    doc.innerHTML = '';\r\n   }\r\n  });\r\n  right_player.forEach((card, index) => {\r\n   if(card != null) {\r\n    let doc = document.getElementsByClassName('right-card-' + (card.order+1))[0];\r\n    doc.innerHTML = '<img src=\"' + card.image + '\">';\r\n   }\r\n   else {\r\n    let doc = document.getElementsByClassName('right-card-' + (index+1))[0];\r\n    doc.innerHTML = '';\r\n   }\r\n  });\r\n  field.forEach((card, index) => {\r\n   if(card != null) {\r\n    let doc = document.getElementsByClassName('field-card-' + (index+1))[0];\r\n    if(card.animation != '') {\r\n     doc.style.animationName = (card.color == 'blue') ? 'rtb' : 'btr';\r\n     doc.style.animationDuration = '1s';\r\n     doc.style.animationFillMode = \"forwards\";\r\n    }\r\n    else {\r\n     doc.style.backgroundColor = (card.color == 'blue') ? 'SlateBlue' : 'IndianRed';\r\n     doc.style.animationName = '';\r\n     doc.style.animationDuration = '';\r\n     doc.style.animationFillMode = '';\r\n    }\r\n    doc.innerHTML = '<img src=\"' + card.image + '\" style=\"mix-blend-mode: luminosity; '+ card.animation +'\">';\r\n    card.animation = '';\r\n    //doc.style.backgroundImage = \"url('\" + card.image + \"')\";\r\n    \r\n   }\r\n   else {\r\n    let doc = document.getElementsByClassName('field-card-' + (index+1))[0];\r\n    doc.innerHTML = '';\r\n   }\r\n  });\r\n  const newPromise = new Promise( (resolve, reject) => setTimeout(() => { resolve(\"Flipper Done\"); }, 10) );\r\n }\r\n \r\n async function GetCards() {\r\n  left_player = [null,null,null,null,null];\r\n  right_player = [null,null,null,null,null];\r\n  field = [null,null,null,null,null,null,null,null,null];\r\n  for(let i = 0; i <= 4; i++) {\r\n   let lcard = null;\r\n   let lran = Math.floor(Math.random()*405) + 1;\r\n   await fetch(\"https://ffxivcollect.com/api/triad/cards/\" + lran).then(response => response.json()).then(data => {\r\n    lcard = new card(lran, data.stats.numeric.top, data.stats.numeric.right, data.stats.numeric.left, data.stats.numeric.bottom, i, data.image, 'blue');\r\n    left_player[i] = lcard;\r\n   });\r\n   \r\n   let rcard = null;\r\n   let rran = Math.floor(Math.random()*405) + 1;\r\n   await fetch(\"https://ffxivcollect.com/api/triad/cards/\" + rran).then(response => response.json()).then(data => {\r\n    rcard = new card(rran, data.stats.numeric.top, data.stats.numeric.right, data.stats.numeric.left, data.stats.numeric.bottom, i, data.image, 'red');\r\n    right_player[i] = rcard;\r\n   });\r\n  }\r\n }\r\n \r\n async function CalcFlipper(card, atk, def, findex) {\r\n  let left = null;\r\n  let right = null;\r\n  let top = null;\r\n  let bottom = null;\r\n  let score = 0;\r\n  if(findex > 0) {\r\n   left = field[findex-1];\r\n  }\r\n  if(findex > 2) {\r\n   top = field[findex-3];\r\n  }\r\n  if(findex < 8) {\r\n   right = field[findex+1];\r\n  }\r\n  if(findex < 6) {\r\n   bottom = field[findex+3];\r\n  }\r\n  if(left != null) {\r\n   if(left.right < card.left && left.color == def) {\r\n    score += (left.top + left.bottom + left.left + left.right)*2;\r\n    score += await CalcFlipper(left, atk, def);\r\n   }\r\n  }\r\n  else {\r\n   if(findex != 0 && findex != 3 && findex != 6)\r\n    score -= (10 - card.left);\r\n  }\r\n  if(top != null) {\r\n   if(top.bottom < card.top && top.color == def) {\r\n    score += (top.top + top.bottom + top.left + top.right)*2;\r\n    score += await CalcFlipper(top, atk, def);\r\n   }\r\n  }\r\n  else {\r\n   if(findex != 0 && findex != 1 && findex != 2)\r\n    score -= (10 - card.top);\r\n  }\r\n  if(right != null) {\r\n   if(right.left < card.right && right.color == def) {\r\n    score += (right.top + right.bottom + right.left + right.right)*2;\r\n    score += await CalcFlipper(right, atk, def);\r\n   }\r\n  }\r\n  else {\r\n   if(findex != 2 && findex != 5 && findex != 8)\r\n    score -= (10 - card.right);\r\n  }\r\n  if(bottom != null) {\r\n   if(bottom.top < card.bottom && bottom.color == def) {\r\n    score += (bottom.top + bottom.bottom + bottom.left + bottom.right)*2;\r\n    score += await CalcFlipper(bottom, atk, def);\r\n   }\r\n  }\r\n  else {\r\n   if(findex != 6 && findex != 7 && findex != 8)\r\n    score -= (10 - card.bottom);\r\n  }\r\n  const newPromise = new Promise( (resolve, reject) => setTimeout(() => { resolve(\"Calc Done\"); }, 10) );\r\n  return score;\r\n }\r\n \r\n async function CalcMove(player) {\r\n  let hand = right_player;\r\n  let map = new Map();\r\n  let atk = 'red';\r\n  let def = 'blue';\r\n  if(player == 'left') {\r\n   hand = left_player;\r\n   atk = 'blue';\r\n   def = 'red';\r\n  }\r\n  for(let i=0; i < hand.length; i++) {\r\n   let card = hand[i];\r\n   if(card != null)\r\n    for(let j=0; j<field.length; j++) {\r\n     let f = field[j];\r\n     if(f == null) {\r\n      let score = await CalcFlipper(card, atk, def, j);\r\n      map.set(i + '|' + j, score);\r\n     }\r\n    }\r\n  }\r\n  highest = -10000;\r\n  keypick = '';\r\n  for (const [key, value] of map) {\r\n   if(value > highest) {\r\n    keypick = key;\r\n    highest = value;\r\n   }\r\n  }\r\n  const newPromise = new Promise( (resolve, reject) => setTimeout(() => { resolve(\"Calc Done\"); }, 10) );\r\n  return keypick;\r\n }\r\n \r\n async function StartGame() {\r\n  for(let i = 0; i < 9; i++) {\r\n   let doc = document.getElementsByClassName('field-card-' + (i+1))[0];\r\n   doc.innerHtml = '';\r\n   doc.style.animationName = '';\r\n   doc.style.animationDuration = '';\r\n   doc.style.animationFillMode = '';\r\n   if(i%2==0) {\r\n    doc.style.backgroundColor = '#AAAAAA';\r\n   }\r\n   else {\r\n    doc.style.backgroundColor = '#DDDDDD';\r\n   }\r\n  }\r\n  await GetCards();\r\n  turn_player = (Math.floor(Math.random()*2) == 0) ? 'left' : 'right';\r\n  turn_count = 1;\r\n  await Draw();\r\n }\r\n \r\n async function nextMove() {\r\n  let keypick = await CalcMove(turn_player);\r\n  await Move(turn_player, keypick.split('|')[0], keypick.split('|')[1]);\r\n  await Draw();\r\n  turn_player = (turn_player == 'left') ? 'right' : 'left';\r\n }\r\n \r\n function getWinner() {\r\n  let blue_score = 0;\r\n  let red_score = 0;\r\n  field.forEach((card) => {\r\n   if(card.color == 'red')\r\n    red_score += 1;\r\n   else\r\n    blue_score += 1;\r\n  });\r\n  if(blue_score > red_score)\r\n   document.cookie = 'WinnerTT=blue; path=/';\r\n  else if(red_score > blue_score)\r\n   document.cookie = 'WinnerTT=red; path=/';\r\n  else\r\n   document.cookie = 'WinnerTT=tie; path=/';\r\n }\r\n \r\n class card {\r\n  constructor(n, t, r, l, b, o, i, c) {\r\n   this.number = n;\r\n   this.top = t;\r\n   this.right = r;\r\n   this.left = l;\r\n   this.bottom = b;\r\n   this.order = o;\r\n   this.image = i;\r\n   this.color = c;\r\n   this.animation = '';\r\n  }\r\n }"},"IsEnabled":false,"RefreshTime":0}